{"version":3,"sources":["components/Recipe.jsx","App.js","reportWebVitals.js","index.js"],"names":["Recipe","props","className","label","ingredients","map","element","id","calories","src","image","alt","App","useState","recipes","setRecipes","search","setSearch","exampleURL","useEffect","console","log","getRecipes","a","fetch","response","json","data","hits","onSubmit","event","preventDefault","stopPropagation","type","onChange","target","value","onClick","item","recipe","ingredientLines","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAiBeA,EAjBA,SAACC,GACZ,OACI,sBAAKC,UAAU,SAAf,UACI,6BAAKD,EAAME,QAAW,uBACtB,6BAEQF,EAAMG,YAAYC,KAAI,SAACC,EAASC,GAC5B,OAAO,6BAAcD,GAALC,QAGvB,uBACL,6CAAgBN,EAAMO,YAAe,uBACrC,qBAAKC,IAAKR,EAAMS,MAAOC,IAAI,oB,MC+BxBC,MAvCf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAGMC,EAAU,0CAAsCF,EAAtC,mBAFD,WAEC,oBADA,oCAGhBG,qBAAU,WACRC,QAAQC,IAAI,6BACZ,CAACL,IACH,IAKMM,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAMN,GADZ,cACXO,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBZ,EAAWY,EAAKC,MAHC,2CAAH,qDAMhB,OACE,sBAAK1B,UAAU,MAAf,UACE,kDACA,uBAAMA,UAAU,aAAa2B,SAdd,SAACC,GAClBA,EAAMC,iBACND,EAAME,kBACNV,KAWE,UACE,uBAAOW,KAAK,OAAO/B,UAAY,YAAYgC,SAAU,SAACJ,GAASb,EAAUa,EAAMK,OAAOC,UACtF,wBAAQlC,UAAU,eAAe+B,KAAK,SAASI,QAASf,EAAxD,uBAEF,qBAAKpB,UAAU,UAAf,SAEEY,EAAQT,KAAI,SAACiC,EAAM/B,GACjB,OAAO,cAAC,EAAD,CAAiBJ,MAAOmC,EAAKC,OAAOpC,MAAOK,SAAU8B,EAAKC,OAAO/B,SAAUE,MAAO4B,EAAKC,OAAO7B,MAAON,YAAakC,EAAKC,OAAOC,iBAAjHjC,YCvBfkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b152a3d9.chunk.js","sourcesContent":["const Recipe = (props) => {\n    return (\n        <div className='Recipe'>\n            <h1>{props.label}</h1><br/>\n            <ul>\n                {\n                    props.ingredients.map((element, id) => {\n                        return <li key={id}>{element}</li>\n                    })\n                }\n            </ul><br/>\n            <div>Calories: {props.calories}</div><br/>\n            <img src={props.image} alt='recipeImage' />\n        </div>\n    )\n}\n\nexport default Recipe;\n","import {useEffect, useState} from 'react';\nimport Recipe from './components/Recipe';\nimport './App.css';\n\nfunction App() {\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const APP_ID = '5929ef02';\n  const APP_KEY = '37452516411f946bc4a62668a87b8f0b';\n  const exampleURL = `https://api.edamam.com/search?q=${search}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  useEffect(()=>{\n    console.log('Updated search contents');\n  },[search]);\n  const submitFunc = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    getRecipes();\n  }\n  const getRecipes = async () => {\n    const response = await fetch(exampleURL);\n    const data = await response.json();\n    setRecipes(data.hits);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Food Ingredients</h1>\n      <form className='searchForm' onSubmit={submitFunc}>\n        <input type='text' className = 'searchBar' onChange={(event)=>{setSearch(event.target.value)}}/>\n        <button className='searchButton' type='submit' onClick={getRecipes}>Search</button>\n      </form>\n      <div className='recipes'>\n      {\n        recipes.map((item, id)=>{\n          return <Recipe key={id} label={item.recipe.label} calories={item.recipe.calories} image={item.recipe.image} ingredients={item.recipe.ingredientLines}/>\n        })\n      }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}